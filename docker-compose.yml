version: '3.8' # Valid version for Docker Compose

services:
  postgres:
    container_name: postgres # Custom name for the PostgreSQL container
    image: postgres:latest # The latest PostgreSQL image from Docker Hub
    volumes:
      - postgres_data:/var/lib/postgresql/data # Persistent data volume for PostgreSQL
    environment:
      POSTGRES_USER: your_username # Replace with a strong username
      POSTGRES_PASSWORD: your_password # Replace with a strong password
      POSTGRES_DB: your_database # Name of the database to create by default, optional
    ports:
      - "5432:5432" # Exposes PostgreSQL's default port 5432 on the host

  networks:
    quipubase-network:
      driver: bridge

  quipubase:
    container_name: quipubase # Good for easy identification
    build:
      context: . # Assumes Dockerfile is in the current directory
      dockerfile: Dockerfile # Specifies the Dockerfile to use for building the image
    volumes:
      - .:/app # Mounts the current directory into the /app directory in the container.
               # This is useful for development as code changes are reflected without rebuilding.
    ports:
      - "8080:8080" # Maps container port 8080 to host port 8080.
                    # This allows direct access to the 'quipubase' service from the host,
                    # which is useful for testing, but not strictly necessary if only Nginx
                    # is meant to access it.
    networks:
      - quipubase-network # Connects 'quipubase' to the shared network.
    environment:
      env_file: .env # This line is incorrect. It should be `env_file: .env`.
                     # Also, ensure your .env file is structured correctly (KEY=VALUE).

  proxy:
    image: nginx:latest # Uses the latest Nginx image from Docker Hub.
    container_name: proxy # Good for easy identification
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf # Mounts your local nginx.conf into the container.
                                          # This is crucial for Nginx to use your custom configuration.
    ports:
      - "80:80" # Maps host port 80 to container port 80, making Nginx accessible on standard HTTP.
    networks:
      - quipubase-network # Connects 'proxy' to the shared network.
networks:
  quipubase-network:
    driver: bridge # Defines a custom bridge network for internal communication.


volumes:
  postgres_data: # Defines a volume for PostgreSQL data persistence outside of the container
