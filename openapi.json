{"openapi":"3.1.0","info":{"title":"Quipubase","description":"**Quipubase** is a **real-time document database** designed for _AI-native_ applications. Built on top of `RocksDB`, it enables **dynamic, schema-driven collections** using `jsonschema` for flexible document modeling. With **native support for vector similarity search**, Quipubase empowers intelligent querying at scale. Its built-in `pub/sub` architecture allows **real-time subscriptions to document-level events**, making it _a powerful backend for live, reactive AI systems_.","version":"0.0.1"},"paths":{"/v1/collections":{"get":{"tags":["collections"],"summary":" ","description":"List all collections","operationId":"__v1_collections_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"items":{"$ref":"#/components/schemas/CollectionMetadataType"},"type":"array","title":"Response   V1 Collections Get"}}}}}},"post":{"tags":["collections"],"summary":" ","description":"Create a new collection","operationId":"__v1_collections_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/JsonSchemaModel"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CollectionType"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/v1/collections/{collection_id}":{"get":{"tags":["collections"],"summary":" ","description":"Get a specific collection by ID","operationId":"__v1_collections__collection_id__get","parameters":[{"name":"collection_id","in":"path","required":true,"schema":{"type":"string","title":"Collection Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CollectionType"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}},"delete":{"tags":["collections"],"summary":" ","description":"Delete a collection by ID","operationId":"__v1_collections__collection_id__delete","parameters":[{"name":"collection_id","in":"path","required":true,"schema":{"type":"string","title":"Collection Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/DeleteCollectionReturnType"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/v1/events/{collection_id}":{"post":{"tags":["events"],"summary":" ","operationId":"__v1_events__collection_id__post","parameters":[{"name":"collection_id","in":"path","required":true,"schema":{"type":"string","title":"Collection Id"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/QuipubaseRequest"}}}},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PubType"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}},"get":{"tags":["events"],"summary":" ","description":"Subscribe to events for a specific collection","operationId":"__v1_events__collection_id__get","parameters":[{"name":"collection_id","in":"path","required":true,"schema":{"type":"string","title":"Collection Id"}}],"responses":{"200":{"description":"Successful Response"},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/v1/vector/upsert":{"post":{"tags":["stores"],"summary":" ","description":"Upsert texts into the vector store.\n\nArgs:\n        namespace: The namespace to store the embeddings in\n        texts: List of texts to embed and store\n        model: The embedding model to use\n\nReturns:\n        UpsertResponse containing the IDs of the upserted embeddings and count","operationId":"__v1_vector_upsert_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpsertText"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpsertResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/v1/vector/query":{"post":{"tags":["stores"],"summary":" ","description":"Query the vector store for similar texts.\n\nArgs:\n        namespace: The namespace to query\n        query: The text query to search for similar content\n        top_k: Number of results to return\n        model: The embedding model to use\n\nReturns:\n        QueryResponse containing the matched texts and their similarity scores","operationId":"__v1_vector_query_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/QueryText"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/QueryResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/v1/vector/delete":{"delete":{"tags":["stores"],"summary":" ","description":"Delete embeddings from the vector store.\n\nArgs:\n        namespace: The namespace to delete embeddings from\n        ids: List of IDs to delete\n\nReturns:\n        DeleteResponse containing the IDs of the deleted embeddings and count","operationId":"__v1_vector_delete_delete","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/DeleteText"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/DeleteResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/v1/vector/embed":{"post":{"tags":["stores"],"summary":" ","operationId":"__v1_vector_embed_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/EmbedText"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/EmbedResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/v1/auth/{provider}":{"get":{"tags":["auth"],"summary":" ","operationId":"__v1_auth__provider__get","parameters":[{"name":"provider","in":"path","required":true,"schema":{"enum":["github","google"],"type":"string","title":"Provider"}},{"name":"code","in":"query","required":false,"schema":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Code"}}],"responses":{"307":{"description":"Successful Response"},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/v1/file":{"post":{"tags":["file"],"summary":" ","operationId":"__v1_file_post","parameters":[{"name":"format","in":"query","required":true,"schema":{"enum":["html","text"],"type":"string","title":"Format"}}],"requestBody":{"required":true,"content":{"multipart/form-data":{"schema":{"$ref":"#/components/schemas/Body___v1_file_post"}}}},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ContentResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}}},"components":{"schemas":{"Body___v1_file_post":{"properties":{"file":{"type":"string","format":"binary","title":"File"}},"type":"object","required":["file"],"title":"Body___v1_file_post"},"Collection":{"properties":{"id":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Id"}},"type":"object","title":"Collection","description":"Collection\n\nA base model class for managing a RocksDB-backed collection of records. This class provides methods for creating, retrieving, updating, deleting, and querying records, as well as managing the underlying database schema and configuration.\n\nAttributes:\n    id (Optional[UUID]): The unique identifier for the record, autogenerated by default.\n\nMethods:\n    col() -> Rdict:\n        Get or create a RocksDB instance for this collection.\n\n    col_path() -> str:\n        Get the absolute path to the collection directory.\n\n    col_json_schema() -> JsonSchemaModel:\n        Create and persist a JSON schema for this collection.\n\n    cpu_count() -> int:\n        Get the number of CPU cores available.\n\n    tool_definition() -> dict[str, Any]:\n        Generate tool parameters for `OpenAI` function calling.\n\n    tool_param() -> dict:\n        Generate tool parameters for `Anthropic` function calling.\n\n    options() -> Options:\n        Configure RocksDB options for optimal performance.\n\n    retrieve(cls, *, id: UUID) -> Optional[T]:\n        Retrieve a single record by its ID.\n\n    create(self) -> None:\n        Save or update the current record in the database.\n\n    delete(cls, *, id: UUID) -> bool:\n        Delete a record by its ID.\n\n    find(cls, *, limit: int = 100, offset: int = 0, **kwargs: Any) -> Iterator[T]:\n\n    update(cls, *, id: UUID, **kwargs: Any) -> Optional[T]:\n        Update specific fields of a record by its ID.\n\n    destroy(cls) -> int:\n        Delete the entire collection and its data.\n\n    init(cls) -> None:\n        Initialize the collection by creating necessary directories and files."},"CollectionMetadataType":{"properties":{"id":{"type":"string","title":"Id"},"name":{"type":"string","title":"Name"}},"type":"object","required":["id","name"],"title":"CollectionMetadataType"},"CollectionType":{"properties":{"id":{"type":"string","title":"Id"},"name":{"type":"string","title":"Name"},"schema":{"$ref":"#/components/schemas/JsonSchema"}},"type":"object","required":["id","name","schema"],"title":"CollectionType"},"ContentResponse":{"properties":{"chunks":{"items":{"type":"string"},"type":"array","title":"Chunks"},"created":{"type":"number","title":"Created"},"chunkedCount":{"type":"integer","title":"Chunkedcount"}},"type":"object","required":["chunks","created","chunkedCount"],"title":"ContentResponse"},"DeleteCollectionReturnType":{"properties":{"code":{"type":"integer","title":"Code"}},"type":"object","required":["code"],"title":"DeleteCollectionReturnType"},"DeleteResponse":{"properties":{"embeddings":{"items":{"type":"string"},"type":"array","title":"Embeddings"},"deletedCount":{"type":"integer","title":"Deletedcount"}},"type":"object","required":["embeddings","deletedCount"],"title":"DeleteResponse","description":"Response type for delete operations.\n\nFields:\n    embeddings (list[str]): List of deleted item IDs\n    deletedCount (int): Number of items deleted"},"DeleteText":{"properties":{"namespace":{"type":"string","title":"Namespace"},"ids":{"items":{"type":"string"},"type":"array","title":"Ids"}},"type":"object","required":["namespace","ids"],"title":"DeleteText"},"EmbedResponse":{"properties":{"data":{"items":{"$ref":"#/components/schemas/Embedding"},"type":"array","title":"Data"},"created":{"type":"number","title":"Created"},"embedCount":{"type":"integer","title":"Embedcount"}},"type":"object","required":["data","created","embedCount"],"title":"EmbedResponse"},"EmbedText":{"properties":{"content":{"items":{"type":"string"},"type":"array","title":"Content"},"model":{"type":"string","enum":["poly-sage","deep-pulse","mini-scope"],"title":"Model"}},"type":"object","required":["content","model"],"title":"EmbedText"},"Embedding":{"properties":{"id":{"type":"string","title":"Id"},"content":{"anyOf":[{"type":"string"},{"items":{"type":"string"},"type":"array"}],"title":"Content"},"embedding":{"items":{"type":"number"},"type":"array","title":"Embedding"}},"type":"object","required":["content","embedding"],"title":"Embedding","description":"Represents a text embedding with associated metadata.\n\nAttributes:\n    id (str): Unique identifier for the embedding (auto-generated UUID)\n    content (str | list[str]): Text content or list of strings\n    embedding (NDArray[np.float32]): Vector representation of the content"},"HTTPValidationError":{"properties":{"detail":{"items":{"$ref":"#/components/schemas/ValidationError"},"type":"array","title":"Detail"}},"type":"object","title":"HTTPValidationError"},"JsonSchema":{"properties":{"title":{"type":"string","title":"Title"},"description":{"type":"string","title":"Description"},"type":{"type":"string","title":"Type"},"properties":{"additionalProperties":true,"type":"object","title":"Properties"},"required":{"items":{"type":"string"},"type":"array","title":"Required"}},"type":"object","required":["type","properties"],"title":"JsonSchema","description":"JSON Schema representation"},"JsonSchemaModel":{"properties":{"title":{"type":"string","title":"Title","examples":["Task"]},"type":{"type":"string","title":"Type","default":"object","examples":["object"]},"properties":{"additionalProperties":true,"type":"object","title":"Properties","examples":[{"description":{"type":"string"},"done":{"type":"boolean"},"title":{"type":"string"}}]},"required":{"items":{"type":"string"},"type":"array","title":"Required","examples":[["title","done"]]}},"additionalProperties":true,"type":"object","required":["title","properties","required"],"title":"JsonSchemaModel","description":"JSON Schema representation"},"PubType":{"properties":{"collection":{"type":"string","title":"Collection"},"data":{"anyOf":[{"$ref":"#/components/schemas/Collection"},{"items":{"$ref":"#/components/schemas/Collection"},"type":"array"}],"title":"Data"},"event":{"type":"string","enum":["create","read","update","delete","query","stop"],"title":"Event"}},"type":"object","required":["collection","data","event"],"title":"PubType"},"QueryMatch":{"properties":{"score":{"type":"number","title":"Score"},"content":{"type":"string","title":"Content"}},"type":"object","required":["score","content"],"title":"QueryMatch","description":"Represents a similarity search result.\n\nAttributes:\n    score (float): Similarity score between 0 and 1\n    content (str): Text content of the matched item\n    embedding (NDArray[np.float32]): Vector representation of the matched item"},"QueryResponse":{"properties":{"matches":{"items":{"$ref":"#/components/schemas/QueryMatch"},"type":"array","title":"Matches"},"readCount":{"type":"integer","title":"Readcount"}},"type":"object","required":["matches","readCount"],"title":"QueryResponse","description":"Response type for similarity search queries.\n\nFields:\n    matches (list[QueryMatch]): List of matching items\n    readCount (int): Total number of items considered"},"QueryText":{"properties":{"content":{"items":{"type":"string"},"type":"array","title":"Content"},"model":{"type":"string","enum":["poly-sage","deep-pulse","mini-scope"],"title":"Model"},"namespace":{"type":"string","title":"Namespace"},"top_k":{"type":"integer","title":"Top K"}},"type":"object","required":["content","model","namespace","top_k"],"title":"QueryText"},"QuipubaseRequest":{"properties":{"event":{"type":"string","enum":["create","read","update","delete","query","stop"],"title":"Event","default":"query"},"id":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Id"},"data":{"anyOf":[{"additionalProperties":true,"type":"object"},{"type":"null"}],"title":"Data"}},"type":"object","title":"QuipubaseRequest"},"SemanticContent":{"properties":{"id":{"type":"string","title":"Id"},"content":{"type":"string","title":"Content"}},"type":"object","required":["id","content"],"title":"SemanticContent","description":"Typed dictionary for storing semantic content information.\n\nFields:\n    id (str): Unique identifier\n    content (str): Text content"},"UpsertResponse":{"properties":{"contents":{"items":{"$ref":"#/components/schemas/SemanticContent"},"type":"array","title":"Contents"},"upsertedCount":{"type":"integer","title":"Upsertedcount"}},"type":"object","required":["contents","upsertedCount"],"title":"UpsertResponse","description":"Response type for upsert operations.\n\nFields:\n    contents (list[SemanticContent]): List of inserted/updated items\n    upsertedCount (int): Number of items processed"},"UpsertText":{"properties":{"content":{"items":{"type":"string"},"type":"array","title":"Content"},"model":{"type":"string","enum":["poly-sage","deep-pulse","mini-scope"],"title":"Model"},"namespace":{"type":"string","title":"Namespace"}},"type":"object","required":["content","model","namespace"],"title":"UpsertText"},"ValidationError":{"properties":{"loc":{"items":{"anyOf":[{"type":"string"},{"type":"integer"}]},"type":"array","title":"Location"},"msg":{"type":"string","title":"Message"},"type":{"type":"string","title":"Error Type"}},"type":"object","required":["loc","msg","type"],"title":"ValidationError"}}}}