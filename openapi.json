{
	"openapi": "3.1.0",
	"info": {
		"title": "Quipubase",
		"description": "**Quipubase** is a **real-time document database** designed for _AI-native_ applications. Built on top of `RocksDB`, it enables **dynamic, schema-driven collections** using `jsonschema` for flexible document modeling. With **native support for vector similarity search**, Quipubase empowers intelligent querying at scale. Its built-in `pub/sub` architecture allows **real-time subscriptions to document-level events**, making it _a powerful backend for live, reactive AI systems_.",
		"version": "0.0.1"
	},
	"paths": {
		"/v1/collections": {
			"get": {
				"tags": [
					"collections"
				],
				"summary": " ",
				"description": "List all collections",
				"operationId": "__v1_collections_get",
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/CollectionMetadataType"
									},
									"type": "array",
									"title": "Response   V1 Collections Get"
								}
							}
						}
					}
				}
			},
			"post": {
				"tags": [
					"collections"
				],
				"summary": " ",
				"description": "Create a new collection",
				"operationId": "__v1_collections_post",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/JsonSchemaModel"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CollectionType"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			}
		},
		"/v1/collections/{collection_id}": {
			"get": {
				"tags": [
					"collections"
				],
				"summary": " ",
				"description": "Get a specific collection by ID",
				"operationId": "__v1_collections__collection_id__get",
				"parameters": [
					{
						"name": "collection_id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"title": "Collection Id"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CollectionType"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			},
			"delete": {
				"tags": [
					"collections"
				],
				"summary": " ",
				"description": "Delete a collection by ID",
				"operationId": "__v1_collections__collection_id__delete",
				"parameters": [
					{
						"name": "collection_id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"title": "Collection Id"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DeleteCollectionReturnType"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			}
		},
		"/v1/events/{collection_id}": {
			"post": {
				"tags": [
					"events"
				],
				"summary": " ",
				"operationId": "__v1_events__collection_id__post",
				"parameters": [
					{
						"name": "collection_id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"title": "Collection Id"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/QuipubaseRequest"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PubResponse"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			},
			"get": {
				"tags": [
					"events"
				],
				"summary": " ",
				"description": "Subscribe to events for a specific collection",
				"operationId": "__v1_events__collection_id__get",
				"parameters": [
					{
						"name": "collection_id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"title": "Collection Id"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response"
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			}
		},
		"/v1/vector/{namespace}/{id}": {
			"get": {
				"tags": [
					"vector"
				],
				"summary": " ",
				"operationId": "__v1_vector__namespace___id__get",
				"parameters": [
					{
						"name": "namespace",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"title": "Namespace"
						}
					},
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"title": "Id"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			}
		},
		"/v1/vector/{namespace}": {
			"post": {
				"tags": [
					"vector"
				],
				"summary": " ",
				"description": "Upsert texts into the vector store.\n\nArgs:\n        namespace: The namespace to store the embeddings in\n        texts: List of texts to embed and store\n        model: The embedding model to use\n\nReturns:\n        UpsertResponse containing the IDs of the upserted embeddings and count",
				"operationId": "__v1_vector__namespace__post",
				"parameters": [
					{
						"name": "namespace",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"title": "Namespace"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/EmbedText"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UpsertResponse"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			},
			"put": {
				"tags": [
					"vector"
				],
				"summary": " ",
				"description": "Query the vector store for similar texts.\n\nArgs:\n        namespace: The namespace to query\n        query: The text query to search for similar content\n        top_k: Number of results to return\n        model: The embedding model to use\n\nReturns:\n        QueryResponse containing the matched texts and their similarity scores",
				"operationId": "__v1_vector__namespace__put",
				"parameters": [
					{
						"name": "namespace",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"title": "Namespace"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/QueryText"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/QueryResponse"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			},
			"delete": {
				"tags": [
					"vector"
				],
				"summary": " ",
				"description": "Delete embeddings from the vector store.\n\nArgs:\n        namespace: The namespace to delete embeddings from\n        ids: List of IDs to delete\n\nReturns:\n        DeleteResponse containing the IDs of the deleted embeddings and count",
				"operationId": "__v1_vector__namespace__delete",
				"parameters": [
					{
						"name": "namespace",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"title": "Namespace"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/DeleteText"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DeleteResponse"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			}
		},
		"/v1/vector": {
			"post": {
				"tags": [
					"vector"
				],
				"summary": " ",
				"operationId": "__v1_vector_post",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/EmbedText"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/EmbedResponse"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			}
		},
		"/v1/auth/{provider}": {
			"get": {
				"tags": [
					"auth"
				],
				"summary": " ",
				"operationId": "__v1_auth__provider__get",
				"parameters": [
					{
						"name": "provider",
						"in": "path",
						"required": true,
						"schema": {
							"enum": [
								"github",
								"google"
							],
							"type": "string",
							"title": "Provider"
						}
					},
					{
						"name": "code",
						"in": "query",
						"required": false,
						"schema": {
							"anyOf": [
								{
									"type": "string"
								},
								{
									"type": "null"
								}
							],
							"title": "Code"
						}
					}
				],
				"responses": {
					"307": {
						"description": "Successful Response"
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			}
		},
		"/v1/files": {
			"post": {
				"tags": [
					"files"
				],
				"summary": " ",
				"operationId": "__v1_files_post",
				"parameters": [
					{
						"name": "format",
						"in": "query",
						"required": true,
						"schema": {
							"enum": [
								"html",
								"text"
							],
							"type": "string",
							"title": "Format"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"multipart/form-data": {
							"schema": {
								"$ref": "#/components/schemas/Body___v1_files_post"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ChunkFile"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			}
		},
		"/v1/files/{path}": {
			"put": {
				"tags": [
					"files"
				],
				"summary": " ",
				"operationId": "__v1_files__path__put",
				"parameters": [
					{
						"name": "path",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"title": "Path"
						}
					},
					{
						"name": "bucket",
						"in": "query",
						"required": false,
						"schema": {
							"anyOf": [
								{
									"type": "string"
								},
								{
									"type": "null"
								}
							],
							"title": "Bucket"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"multipart/form-data": {
							"schema": {
								"$ref": "#/components/schemas/Body___v1_files__path__put"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GetOrCreateFile"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			},
			"delete": {
				"tags": [
					"files"
				],
				"summary": " ",
				"operationId": "__v1_files__path__delete",
				"parameters": [
					{
						"name": "path",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"title": "Path"
						}
					},
					{
						"name": "bucket",
						"in": "query",
						"required": false,
						"schema": {
							"anyOf": [
								{
									"type": "string"
								},
								{
									"type": "null"
								}
							],
							"title": "Bucket"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"additionalProperties": {
										"type": "boolean"
									},
									"title": "Response   V1 Files  Path  Delete"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			}
		},
		"/v1/file/{path}": {
			"get": {
				"tags": [
					"files"
				],
				"summary": " ",
				"operationId": "__v1_file__path__get",
				"parameters": [
					{
						"name": "path",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"title": "Path"
						}
					},
					{
						"name": "bucket",
						"in": "query",
						"required": false,
						"schema": {
							"anyOf": [
								{
									"type": "string"
								},
								{
									"type": "null"
								}
							],
							"title": "Bucket"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GetOrCreateFile"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			}
		},
		"/v1/filestree/{path}": {
			"get": {
				"tags": [
					"files"
				],
				"summary": " ",
				"operationId": "__v1_filestree__path__get",
				"parameters": [
					{
						"name": "path",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"title": "Path"
						}
					},
					{
						"name": "bucket",
						"in": "query",
						"required": false,
						"schema": {
							"anyOf": [
								{
									"type": "string"
								},
								{
									"type": "null"
								}
							],
							"title": "Bucket"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GetOrCreateFile"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			}
		},
		"/v1/chat/completions": {
			"post": {
				"summary": " ",
				"operationId": "__v1_chat_completions_post",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/GeminiChatCompletion"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			}
		}
	},
	"components": {
		"schemas": {
			"Audio": {
				"properties": {
					"id": {
						"type": "string",
						"title": "Id"
					}
				},
				"type": "object",
				"required": [
					"id"
				],
				"title": "Audio"
			},
			"Body___v1_files__path__put": {
				"properties": {
					"file": {
						"type": "string",
						"format": "binary",
						"title": "File"
					}
				},
				"type": "object",
				"required": [
					"file"
				],
				"title": "Body___v1_files__path__put"
			},
			"Body___v1_files_post": {
				"properties": {
					"file": {
						"type": "string",
						"format": "binary",
						"title": "File"
					}
				},
				"type": "object",
				"required": [
					"file"
				],
				"title": "Body___v1_files_post"
			},
			"ChatCompletionAssistantMessageParam": {
				"properties": {
					"role": {
						"type": "string",
						"const": "assistant",
						"title": "Role"
					},
					"audio": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/Audio"
							},
							{
								"type": "null"
							}
						]
					},
					"content": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"items": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/ChatCompletionContentPartTextParam"
										},
										{
											"$ref": "#/components/schemas/ChatCompletionContentPartRefusalParam"
										}
									]
								},
								"type": "array"
							},
							{
								"type": "null"
							}
						],
						"title": "Content"
					},
					"function_call": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/FunctionCall"
							},
							{
								"type": "null"
							}
						]
					},
					"name": {
						"type": "string",
						"title": "Name"
					},
					"refusal": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Refusal"
					},
					"tool_calls": {
						"items": {
							"$ref": "#/components/schemas/ChatCompletionMessageToolCallParam"
						},
						"type": "array",
						"title": "Tool Calls"
					}
				},
				"type": "object",
				"required": [
					"role"
				],
				"title": "ChatCompletionAssistantMessageParam"
			},
			"ChatCompletionContentPartImageParam": {
				"properties": {
					"image_url": {
						"$ref": "#/components/schemas/ImageURL"
					},
					"type": {
						"type": "string",
						"const": "image_url",
						"title": "Type"
					}
				},
				"type": "object",
				"required": [
					"image_url",
					"type"
				],
				"title": "ChatCompletionContentPartImageParam"
			},
			"ChatCompletionContentPartInputAudioParam": {
				"properties": {
					"input_audio": {
						"$ref": "#/components/schemas/InputAudio"
					},
					"type": {
						"type": "string",
						"const": "input_audio",
						"title": "Type"
					}
				},
				"type": "object",
				"required": [
					"input_audio",
					"type"
				],
				"title": "ChatCompletionContentPartInputAudioParam"
			},
			"ChatCompletionContentPartRefusalParam": {
				"properties": {
					"refusal": {
						"type": "string",
						"title": "Refusal"
					},
					"type": {
						"type": "string",
						"const": "refusal",
						"title": "Type"
					}
				},
				"type": "object",
				"required": [
					"refusal",
					"type"
				],
				"title": "ChatCompletionContentPartRefusalParam"
			},
			"ChatCompletionContentPartTextParam": {
				"properties": {
					"text": {
						"type": "string",
						"title": "Text"
					},
					"type": {
						"type": "string",
						"const": "text",
						"title": "Type"
					}
				},
				"type": "object",
				"required": [
					"text",
					"type"
				],
				"title": "ChatCompletionContentPartTextParam"
			},
			"ChatCompletionDeveloperMessageParam": {
				"properties": {
					"content": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"items": {
									"$ref": "#/components/schemas/ChatCompletionContentPartTextParam"
								},
								"type": "array"
							}
						],
						"title": "Content"
					},
					"role": {
						"type": "string",
						"const": "developer",
						"title": "Role"
					},
					"name": {
						"type": "string",
						"title": "Name"
					}
				},
				"type": "object",
				"required": [
					"content",
					"role"
				],
				"title": "ChatCompletionDeveloperMessageParam"
			},
			"ChatCompletionFunctionMessageParam": {
				"properties": {
					"content": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Content"
					},
					"name": {
						"type": "string",
						"title": "Name"
					},
					"role": {
						"type": "string",
						"const": "function",
						"title": "Role"
					}
				},
				"type": "object",
				"required": [
					"content",
					"name",
					"role"
				],
				"title": "ChatCompletionFunctionMessageParam"
			},
			"ChatCompletionMessageToolCallParam": {
				"properties": {
					"id": {
						"type": "string",
						"title": "Id"
					},
					"function": {
						"$ref": "#/components/schemas/Function"
					},
					"type": {
						"type": "string",
						"const": "function",
						"title": "Type"
					}
				},
				"type": "object",
				"required": [
					"id",
					"function",
					"type"
				],
				"title": "ChatCompletionMessageToolCallParam"
			},
			"ChatCompletionSystemMessageParam": {
				"properties": {
					"content": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"items": {
									"$ref": "#/components/schemas/ChatCompletionContentPartTextParam"
								},
								"type": "array"
							}
						],
						"title": "Content"
					},
					"role": {
						"type": "string",
						"const": "system",
						"title": "Role"
					},
					"name": {
						"type": "string",
						"title": "Name"
					}
				},
				"type": "object",
				"required": [
					"content",
					"role"
				],
				"title": "ChatCompletionSystemMessageParam"
			},
			"ChatCompletionToolMessageParam": {
				"properties": {
					"content": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"items": {
									"$ref": "#/components/schemas/ChatCompletionContentPartTextParam"
								},
								"type": "array"
							}
						],
						"title": "Content"
					},
					"role": {
						"type": "string",
						"const": "tool",
						"title": "Role"
					},
					"tool_call_id": {
						"type": "string",
						"title": "Tool Call Id"
					}
				},
				"type": "object",
				"required": [
					"content",
					"role",
					"tool_call_id"
				],
				"title": "ChatCompletionToolMessageParam"
			},
			"ChatCompletionUserMessageParam": {
				"properties": {
					"content": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"items": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/ChatCompletionContentPartTextParam"
										},
										{
											"$ref": "#/components/schemas/ChatCompletionContentPartImageParam"
										},
										{
											"$ref": "#/components/schemas/ChatCompletionContentPartInputAudioParam"
										},
										{
											"$ref": "#/components/schemas/File"
										}
									]
								},
								"type": "array"
							}
						],
						"title": "Content"
					},
					"role": {
						"type": "string",
						"const": "user",
						"title": "Role"
					},
					"name": {
						"type": "string",
						"title": "Name"
					}
				},
				"type": "object",
				"required": [
					"content",
					"role"
				],
				"title": "ChatCompletionUserMessageParam"
			},
			"ChunkFile": {
				"properties": {
					"chunks": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"title": "Chunks"
					},
					"created": {
						"type": "number",
						"title": "Created"
					},
					"chunkedCount": {
						"type": "integer",
						"title": "Chunkedcount"
					}
				},
				"type": "object",
				"required": [
					"chunks",
					"created",
					"chunkedCount"
				],
				"title": "ChunkFile"
			},
			"Collection": {
				"properties": {
					"id": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Id"
					}
				},
				"additionalProperties": true,
				"type": "object",
				"title": "Collection",
				"description": "Collection\n\nA base model class for managing a RocksDB-backed collection of records. This class provides methods for creating, retrieving, updating, deleting, and querying records, as well as managing the underlying database schema and configuration.\n\nAttributes:\n    id (Optional[UUID]): The unique identifier for the record, autogenerated by default.\n\nMethods:\n    col() -> Rdict:\n        Get or create a RocksDB instance for this collection.\n\n    col_path() -> str:\n        Get the absolute path to the collection directory.\n\n    col_json_schema() -> JsonSchemaModel:\n        Create and persist a JSON schema for this collection.\n\n    cpu_count() -> int:\n        Get the number of CPU cores available.\n\n    tool_definition() -> dict[str, Any]:\n        Generate tool parameters for `OpenAI` function calling.\n\n    tool_param() -> dict:\n        Generate tool parameters for `Anthropic` function calling.\n\n    options() -> Options:\n        Configure RocksDB options for optimal performance.\n\n    retrieve(cls, *, id: UUID) -> Optional[T]:\n        Retrieve a single record by its ID.\n\n    create(self) -> None:\n        Save or update the current record in the database.\n\n    delete(cls, *, id: UUID) -> bool:\n        Delete a record by its ID.\n\n    find(cls, *, limit: int = 100, offset: int = 0, **kwargs: Any) -> Iterator[T]:\n\n    update(cls, *, id: UUID, **kwargs: Any) -> Optional[T]:\n        Update specific fields of a record by its ID.\n\n    destroy(cls) -> int:\n        Delete the entire collection and its data.\n\n    init(cls) -> None:\n        Initialize the collection by creating necessary directories and files."
			},
			"CollectionMetadataType": {
				"properties": {
					"id": {
						"type": "string",
						"title": "Id"
					},
					"name": {
						"type": "string",
						"title": "Name"
					}
				},
				"type": "object",
				"required": [
					"id",
					"name"
				],
				"title": "CollectionMetadataType"
			},
			"CollectionType": {
				"properties": {
					"id": {
						"type": "string",
						"title": "Id"
					},
					"name": {
						"type": "string",
						"title": "Name"
					},
					"schema": {
						"$ref": "#/components/schemas/JsonSchema"
					}
				},
				"type": "object",
				"required": [
					"id",
					"name",
					"schema"
				],
				"title": "CollectionType"
			},
			"DeleteCollectionReturnType": {
				"properties": {
					"code": {
						"type": "integer",
						"title": "Code"
					}
				},
				"type": "object",
				"required": [
					"code"
				],
				"title": "DeleteCollectionReturnType"
			},
			"DeleteResponse": {
				"properties": {
					"data": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"title": "Data"
					},
					"count": {
						"type": "integer",
						"title": "Count"
					},
					"ellapsed": {
						"type": "number",
						"title": "Ellapsed"
					}
				},
				"type": "object",
				"required": [
					"data",
					"count",
					"ellapsed"
				],
				"title": "DeleteResponse",
				"description": "Response type for delete operations.\n\nFields:\n    embeddings (list[str]): List of deleted item IDs\n    count (int): Number of items deleted\n    ellapsed (float): Seconds taken to perform the action"
			},
			"DeleteText": {
				"properties": {
					"ids": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"title": "Ids"
					}
				},
				"type": "object",
				"required": [
					"ids"
				],
				"title": "DeleteText"
			},
			"EmbedResponse": {
				"properties": {
					"data": {
						"items": {
							"$ref": "#/components/schemas/Embedding"
						},
						"type": "array",
						"title": "Data"
					},
					"count": {
						"type": "integer",
						"title": "Count"
					},
					"ellapsed": {
						"type": "number",
						"title": "Ellapsed"
					}
				},
				"type": "object",
				"required": [
					"data",
					"count",
					"ellapsed"
				],
				"title": "EmbedResponse"
			},
			"EmbedText": {
				"properties": {
					"content": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"title": "Content"
					},
					"model": {
						"type": "string",
						"enum": [
							"poly-sage",
							"deep-pulse",
							"mini-scope"
						],
						"title": "Model"
					}
				},
				"additionalProperties": true,
				"type": "object",
				"required": [
					"content",
					"model"
				],
				"title": "EmbedText",
				"description": "Base model for text embeddings",
				"examples": [
					{
						"content": [
							"I love Quipubase!",
							"I love myself!",
							"I love my family!",
							"I love my friends!",
							"I love my country!",
							"I love my job!"
						],
						"model": "poly-sage"
					}
				]
			},
			"Embedding": {
				"properties": {
					"content": {
						"type": "string",
						"title": "Content"
					},
					"embedding": {
						"items": {
							"type": "number"
						},
						"type": "array",
						"title": "Embedding"
					},
					"id": {
						"type": "string",
						"title": "Id",
						"readOnly": true
					}
				},
				"type": "object",
				"required": [
					"content",
					"embedding",
					"id"
				],
				"title": "Embedding",
				"description": "Represents a text embedding with associated metadata.\n\nAttributes:\n    id (str): Unique identifier for the embedding (auto-generated UUID)\n    content (str | list[str]): Text content or list of strings\n    embedding (NDArray[np.float32]): Vector representation of the content"
			},
			"File": {
				"properties": {
					"file": {
						"$ref": "#/components/schemas/FileFile"
					},
					"type": {
						"type": "string",
						"const": "file",
						"title": "Type"
					}
				},
				"type": "object",
				"required": [
					"file",
					"type"
				],
				"title": "File"
			},
			"FileFile": {
				"properties": {
					"file_data": {
						"type": "string",
						"title": "File Data"
					},
					"file_id": {
						"type": "string",
						"title": "File Id"
					},
					"filename": {
						"type": "string",
						"title": "Filename"
					}
				},
				"type": "object",
				"title": "FileFile"
			},
			"FileType": {
				"properties": {
					"url": {
						"type": "string",
						"title": "Url"
					},
					"path": {
						"type": "string",
						"title": "Path"
					}
				},
				"type": "object",
				"required": [
					"url",
					"path"
				],
				"title": "FileType"
			},
			"Function": {
				"properties": {
					"arguments": {
						"type": "string",
						"title": "Arguments"
					},
					"name": {
						"type": "string",
						"title": "Name"
					}
				},
				"type": "object",
				"required": [
					"arguments",
					"name"
				],
				"title": "Function"
			},
			"FunctionCall": {
				"properties": {
					"arguments": {
						"type": "string",
						"title": "Arguments"
					},
					"name": {
						"type": "string",
						"title": "Name"
					}
				},
				"type": "object",
				"required": [
					"arguments",
					"name"
				],
				"title": "FunctionCall"
			},
			"GeminiChatCompletion": {
				"properties": {
					"model": {
						"type": "string",
						"enum": [
							"gemini-2.5-flash-preview-05-20",
							"gemini-2.5-pro-preview-05-06"
						],
						"title": "Model",
						"description": "The model to use for the chat completion.",
						"default": "gemini-2.5-flash-preview-05-20"
					},
					"messages": {
						"items": {
							"anyOf": [
								{
									"$ref": "#/components/schemas/ChatCompletionDeveloperMessageParam"
								},
								{
									"$ref": "#/components/schemas/ChatCompletionSystemMessageParam"
								},
								{
									"$ref": "#/components/schemas/ChatCompletionUserMessageParam"
								},
								{
									"$ref": "#/components/schemas/ChatCompletionAssistantMessageParam"
								},
								{
									"$ref": "#/components/schemas/ChatCompletionToolMessageParam"
								},
								{
									"$ref": "#/components/schemas/ChatCompletionFunctionMessageParam"
								}
							]
						},
						"type": "array",
						"title": "Messages",
						"description": "The messages to send to the model."
					}
				},
				"type": "object",
				"required": [
					"messages"
				],
				"title": "GeminiChatCompletion",
				"description": "GeminiChatCompletion\n----------------------\nThis tool invokes Google's Gemini Large Language Model to generate a text streaming response to a sequence of messages.\n`gemini-2.5-flash-preview-05-20` is the default model for free tier users.\n`gemini-2.5-pro-preview-05-06` is the default model for paid users."
			},
			"GetOrCreateFile": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/FileType"
					},
					"created": {
						"type": "number",
						"title": "Created"
					}
				},
				"type": "object",
				"required": [
					"data",
					"created"
				],
				"title": "GetOrCreateFile"
			},
			"HTTPValidationError": {
				"properties": {
					"detail": {
						"items": {
							"$ref": "#/components/schemas/ValidationError"
						},
						"type": "array",
						"title": "Detail"
					}
				},
				"type": "object",
				"title": "HTTPValidationError"
			},
			"ImageURL": {
				"properties": {
					"url": {
						"type": "string",
						"title": "Url"
					},
					"detail": {
						"type": "string",
						"enum": [
							"auto",
							"low",
							"high"
						],
						"title": "Detail"
					}
				},
				"type": "object",
				"required": [
					"url"
				],
				"title": "ImageURL"
			},
			"InputAudio": {
				"properties": {
					"data": {
						"type": "string",
						"title": "Data"
					},
					"format": {
						"type": "string",
						"enum": [
							"wav",
							"mp3"
						],
						"title": "Format"
					}
				},
				"type": "object",
				"required": [
					"data",
					"format"
				],
				"title": "InputAudio"
			},
			"JsonSchema": {
				"properties": {
					"title": {
						"type": "string",
						"title": "Title"
					},
					"description": {
						"type": "string",
						"title": "Description"
					},
					"type": {
						"type": "string",
						"title": "Type"
					},
					"properties": {
						"additionalProperties": true,
						"type": "object",
						"title": "Properties"
					},
					"required": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"title": "Required"
					}
				},
				"type": "object",
				"required": [
					"type",
					"properties"
				],
				"title": "JsonSchema",
				"description": "JSON Schema representation"
			},
			"JsonSchemaModel": {
				"properties": {
					"title": {
						"type": "string",
						"title": "Title"
					},
					"type": {
						"type": "string",
						"title": "Type",
						"default": "object"
					},
					"properties": {
						"additionalProperties": true,
						"type": "object",
						"title": "Properties"
					},
					"required": {
						"anyOf": [
							{
								"items": {
									"type": "string"
								},
								"type": "array"
							},
							{
								"type": "null"
							}
						],
						"title": "Required"
					},
					"description": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Description"
					}
				},
				"additionalProperties": true,
				"type": "object",
				"required": [
					"title",
					"properties"
				],
				"title": "JsonSchemaModel",
				"description": "JSON Schema representation",
				"example": {
					"properties": {
						"done": {
							"type": "boolean"
						},
						"title": {
							"type": "string"
						},
						"description": {
							"type": "string"
						}
					},
					"required": [
						"title",
						"done"
					],
					"title": "Task",
					"type": "object"
				}
			},
			"PubResponse": {
				"properties": {
					"collection": {
						"type": "string",
						"title": "Collection"
					},
					"data": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/Collection"
							},
							{
								"items": {
									"$ref": "#/components/schemas/Collection"
								},
								"type": "array"
							}
						],
						"title": "Data"
					},
					"event": {
						"type": "string",
						"enum": [
							"create",
							"read",
							"update",
							"delete",
							"query",
							"stop"
						],
						"title": "Event"
					}
				},
				"type": "object",
				"required": [
					"collection",
					"data",
					"event"
				],
				"title": "PubResponse"
			},
			"QueryMatch": {
				"properties": {
					"id": {
						"type": "string",
						"title": "Id"
					},
					"score": {
						"type": "number",
						"title": "Score"
					},
					"content": {
						"type": "string",
						"title": "Content"
					}
				},
				"type": "object",
				"required": [
					"id",
					"score",
					"content"
				],
				"title": "QueryMatch",
				"description": "Represents a similarity search result.\n\nAttributes:\n    score (float): Similarity score between 0 and 1\n    content (str): Text content of the matched item\n    embedding (NDArray[np.float32]): Vector representation of the matched item"
			},
			"QueryResponse": {
				"properties": {
					"data": {
						"items": {
							"$ref": "#/components/schemas/QueryMatch"
						},
						"type": "array",
						"title": "Data"
					},
					"count": {
						"type": "integer",
						"title": "Count"
					},
					"ellapsed": {
						"type": "number",
						"title": "Ellapsed"
					}
				},
				"type": "object",
				"required": [
					"data",
					"count",
					"ellapsed"
				],
				"title": "QueryResponse",
				"description": "Response type for similarity search queries.\n\nFields:\n    matches (list[QueryMatch]): List of matching items\n    count (int): Total number of items considered"
			},
			"QueryText": {
				"properties": {
					"content": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"title": "Content"
					},
					"model": {
						"type": "string",
						"enum": [
							"poly-sage",
							"deep-pulse",
							"mini-scope"
						],
						"title": "Model"
					},
					"top_k": {
						"type": "integer",
						"title": "Top K"
					}
				},
				"additionalProperties": true,
				"type": "object",
				"required": [
					"content",
					"model",
					"top_k"
				],
				"title": "QueryText",
				"description": "Model for querying text embeddings",
				"examples": [
					{
						"content": [
							"I love you!"
						],
						"model": "poly-sage",
						"namespace": "quipubase",
						"top_k": 5
					}
				]
			},
			"QuipubaseRequest": {
				"properties": {
					"event": {
						"type": "string",
						"enum": [
							"create",
							"read",
							"update",
							"delete",
							"query",
							"stop"
						],
						"title": "Event",
						"default": "query"
					},
					"id": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Id"
					},
					"data": {
						"anyOf": [
							{
								"additionalProperties": true,
								"type": "object"
							},
							{
								"type": "null"
							}
						],
						"title": "Data"
					}
				},
				"type": "object",
				"title": "QuipubaseRequest",
				"description": "Quipubase Request\nA model representing a request to the Quipubase API. This model includes fields for the action type, record ID, and any additional data required for the request.\nAttributes:\n    event (QuipuActions): The action to be performed (create, read, update, delete, query).\n    id (Optional[str]): The unique identifier for the record. If None, a new record will be created.\n    data (Optional[Dict[str, Any]]): Additional data required for the request. This can include fields to update or query parameters.",
				"example": {
					"data": {
						"description": "This is an example record for testing purposes.",
						"done": false,
						"title": "Example Record"
					},
					"event": "create"
				}
			},
			"SemanticContent": {
				"properties": {
					"id": {
						"type": "string",
						"title": "Id"
					},
					"content": {
						"type": "string",
						"title": "Content"
					}
				},
				"type": "object",
				"required": [
					"id",
					"content"
				],
				"title": "SemanticContent",
				"description": "Typed dictionary for storing semantic content information.\n\nFields:\n    id (str): Unique identifier\n    content (str): Text content"
			},
			"UpsertResponse": {
				"properties": {
					"data": {
						"items": {
							"$ref": "#/components/schemas/SemanticContent"
						},
						"type": "array",
						"title": "Data"
					},
					"count": {
						"type": "integer",
						"title": "Count"
					},
					"ellapsed": {
						"type": "number",
						"title": "Ellapsed"
					}
				},
				"type": "object",
				"required": [
					"data",
					"count",
					"ellapsed"
				],
				"title": "UpsertResponse",
				"description": "Response type for upsert operations.\n\nFields:\n    contents (list[SemanticContent]): List of inserted/updated items\n    count (int): Number of items processed"
			},
			"ValidationError": {
				"properties": {
					"loc": {
						"items": {
							"anyOf": [
								{
									"type": "string"
								},
								{
									"type": "integer"
								}
							]
						},
						"type": "array",
						"title": "Location"
					},
					"msg": {
						"type": "string",
						"title": "Message"
					},
					"type": {
						"type": "string",
						"title": "Error Type"
					}
				},
				"type": "object",
				"required": [
					"loc",
					"msg",
					"type"
				],
				"title": "ValidationError"
			}
		}
	}
}