
generator client {
  provider = "prisma-client-py"
  interface = "asyncio"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  apiKey    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  organizations OrganizationMember[]
  projects      Project[]
  apiCalls      ApiCall[]
  files         File[]
  assistants    Assistant[]
  threads       Thread[]
  messages      Message[]
  runs          Run[]

  @@map("users")
}

model Organization {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  members  OrganizationMember[]
  projects Project[]

  @@map("organizations")
}

model OrganizationMember {
  id             String @id @default(cuid())
  userId         String
  organizationId String
  role           Role   @default(MEMBER)

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@map("organization_members")
}

model Project {
  id             String  @id @default(cuid())
  name           String
  description    String?
  userId         String
  organizationId String?

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization? @relation(fields: [organizationId], references: [id], onDelete: SetNull)

  apiCalls   ApiCall[]
  files      File[]
  assistants Assistant[]
  threads    Thread[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("projects")
}

model ApiCall {
  id        String      @id @default(cuid())
  endpoint  String
  method    String
  model     String?
  usage     Json?
  response  Json?
  status    ApiStatus   @default(PENDING)
  error     String?
  userId    String
  projectId String?
  createdAt DateTime    @default(now())

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)

  @@map("api_calls")
}

model File {
  id          String     @id @default(cuid())
  filename    String
  originalName String
  mimeType    String
  size        Int
  purpose     FilePurpose
  status      FileStatus @default(UPLOADED)
  userId      String
  projectId   String?
  createdAt   DateTime   @default(now())

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)

  assistantFiles AssistantFile[]
  messageFiles   MessageFile[]

  @@map("files")
}

model Assistant {
  id           String  @id @default(cuid())
  name         String?
  description  String?
  model        String
  instructions String?
  tools        Json?
  fileIds      String[]
  metadata     Json?
  userId       String
  projectId    String?

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)

  assistantFiles AssistantFile[]
  threads        Thread[]
  runs           Run[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("assistants")
}

model AssistantFile {
  id          String @id @default(cuid())
  assistantId String
  fileId      String

  assistant Assistant @relation(fields: [assistantId], references: [id], onDelete: Cascade)
  file      File      @relation(fields: [fileId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([assistantId, fileId])
  @@map("assistant_files")
}

model Thread {
  id          String  @id @default(cuid())
  metadata    Json?
  userId      String
  projectId   String?
  assistantId String?

  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   Project?   @relation(fields: [projectId], references: [id], onDelete: SetNull)
  assistant Assistant? @relation(fields: [assistantId], references: [id], onDelete: SetNull)

  messages Message[]
  runs     Run[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("threads")
}

model Message {
  id       String      @id @default(cuid())
  threadId String
  role     MessageRole
  content  Json
  fileIds  String[]
  metadata Json?
  userId   String

  thread Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  messageFiles MessageFile[]
  runSteps     RunStep[]

  createdAt DateTime @default(now())

  @@map("messages")
}

model MessageFile {
  id        String @id @default(cuid())
  messageId String
  fileId    String

  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  file    File    @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@unique([messageId, fileId])
  @@map("message_files")
}

model Run {
  id           String    @id @default(cuid())
  threadId     String
  assistantId  String
  status       RunStatus @default(QUEUED)
  requiredAction Json?
  lastError    Json?
  expiresAt    DateTime?
  startedAt    DateTime?
  cancelledAt  DateTime?
  failedAt     DateTime?
  completedAt  DateTime?
  model        String
  instructions String?
  tools        Json?
  fileIds      String[]
  metadata     Json?
  usage        Json?
  userId       String

  thread    Thread    @relation(fields: [threadId], references: [id], onDelete: Cascade)
  assistant Assistant @relation(fields: [assistantId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  runSteps RunStep[]

  createdAt DateTime @default(now())

  @@map("runs")
}

model RunStep {
  id           String        @id @default(cuid())
  runId        String
  type         RunStepType
  status       RunStepStatus @default(IN_PROGRESS)
  stepDetails  Json
  lastError    Json?
  expiredAt    DateTime?
  cancelledAt  DateTime?
  failedAt     DateTime?
  completedAt  DateTime?
  messageId    String?

  run     Run      @relation(fields: [runId], references: [id], onDelete: Cascade)
  message Message? @relation(fields: [messageId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())

  @@map("run_steps")
}

enum Role {
  ADMIN
  MEMBER
  VIEWER
}

enum ApiStatus {
  PENDING
  SUCCESS
  ERROR
}

enum FilePurpose {
  FINE_TUNE
  ASSISTANTS
  VISION
}

enum FileStatus {
  UPLOADED
  PROCESSED
  ERROR
}

enum MessageRole {
  USER
  ASSISTANT
}

enum RunStatus {
  QUEUED
  IN_PROGRESS
  REQUIRES_ACTION
  CANCELLING
  CANCELLED
  FAILED
  COMPLETED
  EXPIRED
}

enum RunStepStatus {
  IN_PROGRESS
  CANCELLED
  FAILED
  COMPLETED
  EXPIRED
}

enum RunStepType {
  MESSAGE_CREATION
  TOOL_CALLS
}